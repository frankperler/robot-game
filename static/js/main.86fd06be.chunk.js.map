{"version":3,"sources":["components/StyledComponents/StyledComponents.tsx","robot-vector.jpg","utils/constants.ts","utils/functions.ts","reducers/RobotReducer.tsx","contexts/RobotContext.tsx","components/Robot/Robot.tsx","components/Grid/Grid.tsx","components/CommandCenter/Instructions.tsx","components/CommandCenter/CommandCenter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FlexContainer","styled","props","flexDir","Title","h1","GameBoard","div","Box","width","height","borderRadius","margin","display","ColumnContainer","Form","form","InputField","input","HistoryField","Button","button","inputColor","Text","textAlign","ORIENTATION","NORTH","x","y","EAST","SOUTH","WEST","CommandTypes","DirectionTypes","rotate","facingDir","command","initialRobotState","isPlaced","coordinate","facing","move","commands","errorMessage","robotReducers","state","action","type","firstCommand","payload","direction","alert","includes","newX","newY","newFacing","robotContext","React","stateRobot","dispatchRobot","Robot","src","img","alt","style","marginTop","backgroundRepeat","color","fontSize","Board","rows","drawBoard","colIndex","map","rowIndex","Instructions","textDecoration","CommandCenter","setCommand","count","onSubmit","event","preventDefault","split","handleSubmit","name","value","onChange","e","target","toUpperCase","placeholder","onClick","marginRight","App","className","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.86fd06be.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const FlexContainer = styled(\"div\") <{ flexDir?: string }>`\n    display: flex;\n    flex-direction: ${props => props.flexDir || \"row\"};\n    align-items: center;\n    justify-content: center;\n    color: #f4b860;\n    width: auto;\n    height: auto;\n`\n\nexport const Title = styled.h1`\n    font-size: 4rem;\n    text-align: center;\n    text-shadow: 1rem;\n    color: #C83E4D;\n    padding-bottom: 1rem;\n`\n\nexport const GameBoard = styled.div`\n    display: grid;\n    grid-template-columns:7rem 7rem 7rem 7rem 7rem;\n    grid-template-rows: 7rem 7rem 7rem 7rem 7rem;\n    justify-content: center;\n`\n\nexport const Box = styled.div <{ flexDir?: string, display?: string, width?: string, height?: string, borderRadius?: string, margin?: string }>`\n    background-color: #f4b860;\n    border: 1px solid black;\n    width: ${(props) => props.width || \"100%\"};\n    height: ${(props) => props.height || \"100%\"};\n    border-radius: ${(props) => props.borderRadius || \"0px\"};\n    margin: ${(props) => props.margin || \"0rem\"};\n    display: ${(props) => props.display || \"block\"};\n    flex-direction: ${(props) => props.flexDir || \"row\"};\n    color: #F4d6CC;\n    font-weight:bold;\n    font-size: 1rem;\n`\n\nexport const ColumnContainer = styled.div`\n    background-color: #f4b860;\n    display: flex;\n    flex-direction: column;\n    width:7rem;\n    height: 35rem;\n`\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items:center;\n  justify-content: flex-start;\n  margin: 0.5rem 2rem 1rem 2rem;\n  width: 30rem;\n  height: 18rem;\n  background: #f4b860;\n  border: none;\n  border: 1px solid black;\n  border-radius: 4px;\n`\n\nexport const InputField = styled.input`\n  margin: 1rem;\n  width: 80%;\n  height: 20%;\n  text-align: center;\n  color: black;\n  background:#F4d6CC;\n  border: none;\n  border-radius: 4px;\n`\n\nexport const HistoryField = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  font-size: 0.7rem;\n  margin: 1rem;\n  width: 80%;\n  height: 20%;\n  text-align: center;\n  color: black;\n  background:#F4d6CC;\n  border: none;\n  border-radius: 4px;\n`\n\nexport const Button = styled.button <{ inputColor?: string }>`\n  margin: 1.5rem 2rem 1.5rem 2rem;\n  width: 100%;\n  height: 50%;\n  text-align: center;\n  color: ${props => props.inputColor || \"#F4d6CC\"};\n  background: #C83E4D;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n`\nexport const Text = styled.div<{ textAlign?: string }>`\n  margin-left: 1.5rem;\n  text-align: ${props => props.textAlign};\n  font-size: 0.9rem;\n  color: #C83E4D;\n`\n\n\n\n","export default __webpack_public_path__ + \"static/media/robot-vector.ecd8fd95.jpg\";","import { CoordinateObject, Orientation } from \"../types\";\n\nexport const TABLE_DIMENSION: CoordinateObject = {\n  x: 5,\n  y: 5\n};\n\nexport const ORIENTATION: Orientation = {\n  NORTH: { x: 0, y: 1 },\n  EAST: { x: 1, y: 0 },\n  SOUTH: { x: 0, y: -1 },\n  WEST: { x: -1, y: 0 }\n};\n\nexport const CommandTypes: string[] = [\"PLACE\", \"MOVE\", \"LEFT\", \"RIGHT\", \"REPORT\", \"RESET\"]\nexport const DirectionTypes: string[] = [\"NORTH\", \"SOUTH\", \"WEST\", \"EAST\"]","export const rotate = (facingDir: string, command: string): string => {\n  if (command === \"LEFT\") {\n    if (facingDir === \"NORTH\") return \"WEST\"\n    if (facingDir === \"WEST\") return \"SOUTH\"\n    if (facingDir === \"SOUTH\") return \"EAST\"\n    else return \"NORTH\"\n  }\n  else {\n    if (facingDir === \"NORTH\") return \"EAST\"\n    if (facingDir === \"EAST\") return \"SOUTH\"\n    if (facingDir === \"SOUTH\") return \"WEST\"\n    else return \"NORTH\"\n  }\n}","import { RobotState } from \"../types\";\nimport { RobotActions } from \"../actions/RobotActions\";\nimport { ORIENTATION, DirectionTypes } from \"../utils/constants\";\nimport { rotate } from \"../utils/functions\";\n\nexport const initialRobotState: RobotState = {\n  isPlaced: false,\n  coordinate: { x: 1, y: 0 },\n  facing: null,\n  move: { x: 0, y: 1 },\n  commands: [],\n  errorMessage: \"\"\n};\n\nexport const robotReducers = (state = initialRobotState, action: RobotActions) => {\n  if (action.type === \"COMMAND\") {\n    const firstCommand = action.payload[0];\n    if (firstCommand === \"PLACE\") {\n      const x = +action.payload[1];\n      const y = +action.payload[2];\n      const direction = action.payload[3];\n      if (x > 4 || y > 4 || x < 0 || y < 0) {\n        alert('You cannot go there you would fall')\n        return state;\n      } else if (!DirectionTypes.includes(direction)) {\n        alert('This is not a valid command. Try again')\n        return state;\n      }\n      return {\n        ...state,\n        facing: direction,\n        coordinate: { x: x, y: y },\n        move: ORIENTATION[direction],\n        isPlaced: true,\n        commands: [...state.commands, `${\"PLACE\"} ${x},${y},${direction}`]\n      }\n    } else if (firstCommand === \"MOVE\") {\n      const newX = state.coordinate.x + state.move.x\n      const newY = state.coordinate.y + state.move.y\n      if (newX > 4 || newY > 4 || newY < 0 || newX < 0) {\n        alert('You cannot go there you would fall')\n        return state;\n      }\n      return {\n        ...state,\n        ...(state.isPlaced &&\n          state.coordinate !== null && {\n          coordinate: {\n            x: state.coordinate.x + state.move.x,\n            y: state.coordinate.y + state.move.y\n          },\n          commands: [...state.commands, `${\"MOVE\"}`]\n        })\n      };\n    } else if (firstCommand === \"LEFT\") {\n      const newFacing = rotate(state.facing!, firstCommand)\n      return {\n        ...state,\n        ...(state.isPlaced && {\n          facing: newFacing,\n          move: ORIENTATION[newFacing],\n          commands: [...state.commands, `${\"LEFT\"}`]\n        })\n      };\n    } else if (firstCommand === \"RIGHT\") {\n      const newFacing = rotate(state.facing!, firstCommand)\n      return {\n        ...state,\n        ...(state.isPlaced && {\n          facing: newFacing,\n          move: ORIENTATION[newFacing],\n          commands: [...state.commands, `${\"RIGHT\"}`]\n        })\n      };\n    } else if (firstCommand === \"REPORT\") {\n      return {\n        ...state,\n        ...(state.isPlaced &&\n          state.coordinate !== null && {\n          commands: [\n            ...state.commands,\n            `OUTPUT: ${state.coordinate.x},${state.coordinate.y},${state.facing}`\n          ]\n        })\n      };\n    }\n\n    return state;\n  }\n\n  if (action.type === \"RESET\") {\n    return initialRobotState;\n  }\n\n  return state;\n}","import * as React from \"react\";\nimport { initialRobotState } from \"../reducers/RobotReducer\";\nimport { RobotActions } from \"../actions/RobotActions\";\nimport { RobotState } from \"../types\";\n\nexport const robotContext = React.createContext<{\n  stateRobot: RobotState;\n  dispatchRobot: React.Dispatch<RobotActions>;\n}>({\n  stateRobot: initialRobotState,\n  dispatchRobot: () => undefined,\n});","import * as React from 'react';\nimport img from '../../robot-vector.jpg'\nimport { FlexContainer } from '../StyledComponents/StyledComponents';\nimport { robotContext } from '../../contexts/RobotContext';\n\nexport const Robot = () => {\n\n  const { stateRobot } = React.useContext(robotContext)\n\n  return (\n    <FlexContainer data-testid=\"robot-container\" flexDir=\"column\">\n      <img data-testid=\"robot-image\" src={img} alt=\"Robot\" style={{ width: \"30%\", height: \"30%\", marginTop: \"1.8rem\", backgroundRepeat: \"no-repeat\" }}></img>\n      <div style={{ color: \"black\", fontSize: \"0.8rem\" }}>{stateRobot.facing}</div>\n    </FlexContainer >\n  )\n}","import * as React from 'react'\nimport { Box, ColumnContainer, GameBoard } from '../StyledComponents/StyledComponents'\nimport { Robot } from '../Robot/Robot'\nimport { robotContext } from '../../contexts/RobotContext'\n\nexport const Board = () => {\n  const rows: number[] = [4, 3, 2, 1, 0]\n  const columns: number[] = [0, 1, 2, 3, 4];\n\n  const { stateRobot } = React.useContext(robotContext)\n\n  const drawBoard = React.useCallback(\n    (colIndex: number) => (\n      <ColumnContainer key={`y-${colIndex}`}>\n        {rows.map((rowIndex: number) => {\n          if (stateRobot.isPlaced === true && stateRobot.coordinate?.x === colIndex && stateRobot.coordinate?.y === rowIndex) {\n            return (\n              <Box key={`x-${rowIndex}`}>\n                <Robot />\n              </Box>\n            )\n          } else {\n            return <Box key={`x-${rowIndex}`} />\n          }\n        })\n        }\n      </ColumnContainer>\n    ),\n    [rows]\n  );\n\n  return (\n    <GameBoard>\n      {columns.map(drawBoard)}\n    </GameBoard>\n  )\n}\n","import * as React from 'react'\nimport { Box, Text } from '../StyledComponents/StyledComponents'\n\nexport const Instructions = () => {\n\n  return (\n    <Box width=\"30rem\" height=\"16rem\" borderRadius=\"4px\" display=\"flex\" flexDir=\"column\">\n      <Text style={{ fontSize: \"1.5rem\", textDecoration: \"underline\" }} textAlign=\"center\">INSTRUCTIONS:</Text><br /><br />\n      <Text>PLACE X,Y,F: places the robot on the board at X and Y facing F </Text><br />\n      <Text>MOVE: moves the robot by one square in the direction</Text><br />\n      <Text>LEFT: turns the robot by 90° on the left</Text><br />\n      <Text>RIGHT: turns the robot by 90° on the right</Text><br />\n      <Text>REPORT: outputs the position on the board</Text><br />\n    </Box >\n  )\n}\n","import * as React from 'react'\nimport { FlexContainer, InputField, Form, Button, HistoryField } from '../StyledComponents/StyledComponents'\nimport { robotContext } from '../../contexts/RobotContext'\nimport { CommandTypes } from '../../utils/constants'\nimport { Instructions } from './Instructions'\n\nexport const CommandCenter = () => {\n\n  const [command, setCommand] = React.useState<string>('');\n  const { stateRobot, dispatchRobot } = React.useContext(robotContext);\n  let count = 1;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setCommand(e.target.value.toUpperCase())\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    if (CommandTypes.includes(command.split(/[\\s,]+/)[0])) {\n      dispatchRobot({ type: \"COMMAND\", payload: command.split(/[\\s,]+/) })\n    } else {\n      alert(\"This is not a valid command. Try again\")\n    }\n    setCommand('')\n  }\n\n  const handleReset = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    dispatchRobot({ type: \"RESET\" })\n    setCommand('')\n  }\n\n  return (\n    <FlexContainer flexDir=\"column\">\n      <Form onSubmit={(event) => handleSubmit(event)}>\n        <InputField data-testid=\"commandInput\" name=\"command\" value={command} onChange={handleChange} type=\"text\" placeholder=\"Input your command\" />\n        <FlexContainer>\n          <Button type=\"submit\" data-testid=\"run-cmd-btn\">Run Command</Button>\n          <Button onClick={handleReset}>Reset</Button>\n        </FlexContainer>\n        <HistoryField data-testid=\"history-field\">\n          {stateRobot.commands.map(command => {\n            return (<div style={{ marginRight: \"0.3rem\" }} key={`${count++}+command`}>{count + \". \" + command + \" \"}</div>)\n          })}\n        </HistoryField>\n      </Form>\n      <Instructions />\n    </FlexContainer>\n  )\n}\n","import * as React from 'react'\nimport './App.css'\nimport { Board } from './components/Grid/Grid'\nimport { CommandCenter } from './components/CommandCenter/CommandCenter'\nimport {\n  Title,\n  FlexContainer,\n} from './components/StyledComponents/StyledComponents'\nimport { robotReducers, initialRobotState } from './reducers/RobotReducer';\nimport { robotContext } from './contexts/RobotContext'\n\nfunction App() {\n\n  const [stateRobot, dispatchRobot] = React.useReducer(robotReducers, initialRobotState)\n\n  return (\n    <div className=\"App\">\n      <robotContext.Provider value={{ stateRobot, dispatchRobot }}>\n        <FlexContainer flexDir=\"column\">\n          <Title>Robot Game</Title>\n          <FlexContainer>\n            <CommandCenter />\n            <Board />\n          </FlexContainer>\n        </FlexContainer>\n      </robotContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}